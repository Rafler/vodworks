{"version":3,"sources":["components/Header/Header.js","components/SideMenu/SideMenu.js","components/FilmsList/FilmList.js","components/FilmDetails/FilmDetails.js","App.js","serviceWorker.js","index.js","assets/arrow.svg","assets/eye.svg","assets/add.svg","assets/play.svg"],"names":["Header","className","MenuItemFocusable","withFocusable","filterFilms","genre","focused","src","arrow","SideMenuFocusable","genres","data","setFilms","setFocus","newGenre","filter","el","genre_ids","find","useEffect","map","i","focusKey","onEnterPress","FocusableFilm","film","setFilm","poster_path","alt","original_title","FilmListFocusable","films","FilmDetailsButtonFocusable","image","title","FilmDetailsFocusable","overview","play","eye","add","initNavigation","AppFocusable","useState","setData","setGenre","currentFilm","a","fetch","json","then","res","results","catch","err","console","log","getGenre","filmArr","undefined","getData","Main","focusable","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"6QAgBeA,G,YAZA,WACb,OACI,4BAAQC,UAAU,eAEhB,wBAAIA,UAAU,gBAAd,a,iCCGFC,EAAoBC,2BANT,SAAC,GAAD,EAAEC,YAAF,IAAeC,EAAf,EAAeA,MAAOC,EAAtB,EAAsBA,QAAtB,OACb,wBAAIL,UAAWK,EAAU,6BAA+B,sBAAuBD,EAA/E,IAAuFC,GAAW,yBAC9FL,UAAU,QAAQM,IAAKC,UA8BhBC,EAFWN,2BAtBT,SAAC,GAAwC,IAAvCO,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,SAKzC,SAAST,EAAYU,GACnBF,EAASD,EAAKI,QAAO,SAAAC,GAAE,OAAIA,EAAGC,UAAUC,MAAK,SAAAb,GAAK,OAAIA,IAAUS,SAGlE,OARAK,qBAAU,WACRN,EAAS,YACR,IAOC,yBAAKZ,UAAU,cACb,wBAAIA,UAAU,aACXS,EAAOU,KAAI,SAACf,EAAOgB,GAAR,OACR,kBAACnB,EAAD,CAAmBE,YAAaA,EAAaC,MAAOA,EAAOiB,SAAQ,eAAUD,GAC1DE,aAAc,kBAAMnB,EAAYC,cCrB3DmB,G,OAAgBrB,2BAFT,SAAC,GAAD,IAAEsB,EAAF,EAAEA,KAAenB,GAAjB,EAAQoB,QAAR,EAAiBpB,SAAjB,OAAgC,yBAAKC,IAAKkB,EAAKE,YAAaC,IAAKH,EAAKI,eAAgB5B,UAAWK,EAAU,eAAiB,aAkB1HwB,EAHW3B,2BAXT,SAAC,GAAgC,IAA/B4B,EAA8B,EAA9BA,MAAOL,EAAuB,EAAvBA,QAAuB,EAAdb,SACjC,OACI,6BAASZ,UAAU,aAClB8B,EAAMX,KAAI,SAACK,EAAMJ,GAAP,OAEV,kBAACG,EAAD,CAAeC,KAAMA,EAAMC,QAASA,EAASJ,SAAQ,eAAUD,GAAKE,aAAc,kBAAMG,EAAQD,a,4DCHjGO,EAA6B7B,2BAFT,SAAC,GAAD,IAAE8B,EAAF,EAAEA,MAAOC,EAAT,EAASA,MAAO5B,EAAhB,EAAgBA,QAAhB,OAA8B,yBAAKL,UAAWK,EAAU,iBAAmB,UAAW,yBAAKC,IAAK0B,EAAOL,IAAKM,IAA9E,MAA0FA,MA8BnIC,EAFchC,2BAxBT,SAAC,GAAoC,IAAnCiC,EAAkC,EAAlCA,SAAUT,EAAwB,EAAxBA,YAAaO,EAAW,EAAXA,MAC3C,OACI,6BAASjC,UAAU,gBACjB,wBAAIA,UAAU,cAAciC,GAC5B,yBAAKjC,UAAU,cACb,yBAAKA,UAAU,QAAO,0BAAMA,UAAU,aAAhB,QAAuC,0BAAMA,UAAU,aAAhB,sBAC7D,yBAAKA,UAAU,QAAO,0BAAMA,UAAU,aAAhB,WAA0C,0BAAMA,UAAU,aAAhB,QAChE,yBAAKA,UAAU,QAAO,0BAAMA,UAAU,aAAhB,YAA2C,0BAAMA,UAAU,aAAhB,aAEnE,yBAAKA,UAAU,aACX,yBAAKM,IAAKoB,EAAaC,IAAKM,EAAOjC,UAAU,SAC/C,6BAASA,UAAU,SAASmC,IAE9B,yBAAKnC,UAAU,WACb,kBAAC+B,EAAD,CAA4BC,MAAOI,IAAMH,MAAO,SAChD,kBAACF,EAAD,CAA4BE,MAAO,UAAWD,MAAOK,MACrD,kBAACN,EAAD,CAA4BC,MAAOM,IAAKL,MAAO,aCnBzDM,2BAEA,IA2CMC,EAActC,2BA3CR,WAAO,IAAD,EACQuC,mBAAS,IADjB,mBACT/B,EADS,KACHgC,EADG,OAEWD,mBAAS,IAFpB,mBAEThC,EAFS,KAEDkC,EAFC,OAGUF,mBAAS,IAHnB,mBAGTX,EAHS,KAGFnB,EAHE,OAIe8B,mBAAS,IAJxB,mBAITG,EAJS,KAIInB,EAJJ,iDAMhB,sBAAAoB,EAAA,sEACkBC,MAAM,iFADxB,cAEMC,OAAOC,MAAK,SAAAC,GAAG,OAAIP,EAAQO,EAAIC,YAAUC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MAFxE,4CANgB,sBAWhB,SAASG,EAASC,GAChBA,EAAQrC,KAAI,SAAAK,GAAI,OAAIA,EAAKR,UAAUG,KAAI,SAAAJ,QACM0C,IAAvChD,EAAOQ,MAAK,SAAAb,GAAK,OAAIA,IAAUW,MACjC4B,EAAS,GAAD,mBAAKlC,GAAL,CAAaM,WAgB3B,OAXAG,qBAAU,YAnBM,mCAoBdwC,KACC,IAEHxC,qBAAU,WACRqC,EAAS7C,KACR,CAACA,EAAM6C,IAEVrC,qBAAU,WACRP,EAASD,EAAKI,QAAO,SAAAC,GAAE,OAAIA,EAAGC,UAAUC,MAAK,SAAAb,GAAK,OAAIA,IAAUK,EAAO,YACtE,CAACA,IAEA,yBAAKT,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAmBS,OAAQA,EAAQC,KAAMA,EAAMC,SAAUA,EAAUU,SAAU,SAC7E,kBAAC,EAAD,CAAmBS,MAAOA,EAAOL,QAASA,EAASJ,SAAU,YAC5DuB,EAAYlB,aACT,kBAAC,EAAD,CAAsBS,SAAUS,EAAYT,SAAUT,YAAakB,EAAYlB,YAClEO,MAAOW,EAAYX,YAU7B0B,EAFF,SAAC,GAAD,sBAAS,kBAACnB,EAAD,CAAcoB,WAAW,KC5C3BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD6H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdvB,OAAM,SAAAwB,GACLtB,QAAQsB,MAAMA,EAAMC,a,mBEzI5BC,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.299b0daa.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Header.scss'\n\nconst Header = () => {\n  return (\n      <header className=\"main-header\">\n\n        <h1 className=\"header-title\">\n          Filmer\n        </h1>\n\n      </header>\n  );\n};\n\nexport default Header;\n","import React, {useEffect} from 'react';\nimport './SideMenu.scss'\nimport {withFocusable} from '@noriginmedia/react-spatial-navigation';\nimport arrow from '../../assets/arrow.svg'\n\nconst MenuItem = ({filterFilms, genre, focused}) => (\n    <li className={focused ? 'side-menu__element focused' : 'side-menu__element'}>{genre} {focused && <img\n        className=\"arrow\" src={arrow}/>}</li>\n);\n\n\nconst MenuItemFocusable = withFocusable()(MenuItem);\n\nconst SideMenu = ({genres, data, setFilms, setFocus}) => {\n  useEffect(() => {\n    setFocus('MENU-0');\n  }, []);\n\n  function filterFilms(newGenre) {\n    setFilms(data.filter(el => el.genre_ids.find(genre => genre === newGenre)));\n  }\n\n  return (\n      <nav className=\"navigation\">\n        <ul className=\"side-menu\">\n          {genres.map((genre, i) => (\n              <MenuItemFocusable filterFilms={filterFilms} genre={genre} focusKey={`MENU-${i}`}\n                                 onEnterPress={() => filterFilms(genre)}/>\n          ))}\n        </ul>\n\n      </nav>\n  );\n};\n\nconst SideMenuFocusable = withFocusable()(SideMenu);\n\nexport default SideMenuFocusable;\n","import React, {useEffect} from 'react';\nimport './FilmList.scss'\nimport {withFocusable} from '@noriginmedia/react-spatial-navigation';\n\nconst Film = ({film, setFilm, focused}) => ( <img src={film.poster_path} alt={film.original_title} className={focused ? 'film focused' : 'film'} />)\n\nconst FocusableFilm = withFocusable()(Film);\n\nconst FilmList = ({films, setFilm, setFocus}) => {\n  return (\n      <section className=\"film-list\">\n      {films.map((film, i) => (\n\n       <FocusableFilm film={film} setFilm={setFilm} focusKey={`FILM-${i}`} onEnterPress={() => setFilm(film)}/>\n      ))}\n      </section>\n  );\n};\n\nconst FilmListFocusable = withFocusable()(FilmList);\n\n\nexport default FilmListFocusable;\n","import React from 'react';\nimport './FilmDetails.scss'\n\nimport eye from './../../assets/eye.svg';\nimport add from './../../assets/add.svg';\nimport play from './../../assets/play.svg'\nimport {withFocusable} from '@noriginmedia/react-spatial-navigation';\n\nconst FilmDetailsButton = ({image, title, focused}) => (<div className={focused ? \"button focused\" : \"button\" }><img src={image} alt={title}/>   {title}</div>);\n\nconst FilmDetailsButtonFocusable = withFocusable()(FilmDetailsButton);\n\nconst FilmDetails = ({overview, poster_path, title}) => {\n  return (\n      <section className=\"film-details\">\n        <h3 className=\"film-title\">{title}</h3>\n        <div className=\"properties\">\n          <div className=\"prop\"><span className=\"prop-name\">Time</span><span className=\"prop-data\">1 hour 23 minutes</span></div>\n          <div className=\"prop\"><span className=\"prop-name\">Country</span><span className=\"prop-data\">USA</span></div>\n          <div className=\"prop\"><span className=\"prop-name\">Language</span><span className=\"prop-data\">English</span></div>\n        </div>\n        <div className=\"container\">\n            <img src={poster_path} alt={title} className=\"film\"/>\n          <article className=\"about\">{overview}</article>\n        </div>\n        <div className=\"buttons\">\n          <FilmDetailsButtonFocusable image={play} title={'Play'}/>\n          <FilmDetailsButtonFocusable title={'Trailer'} image={eye}/>\n          <FilmDetailsButtonFocusable image={add} title={'Add'}/>\n        </div>\n      </section>\n  );\n};\n\n\n\nconst FilmDetailsFocusable = withFocusable()(FilmDetails);\n\nexport default FilmDetailsFocusable;\n","import React, {useEffect, useState} from 'react';\nimport './App.scss';\n\nimport Header from './components/Header/Header';\nimport SideMenuFocusable from './components/SideMenu/SideMenu';\nimport FilmListFocusable from './components/FilmsList/FilmList';\nimport FilmDetailsFocusable from './components/FilmDetails/FilmDetails';\nimport {initNavigation, withFocusable} from '@noriginmedia/react-spatial-navigation';\n\ninitNavigation();\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  const [genres, setGenre] = useState([]);\n  const [films, setFilms] = useState([]);\n  const [currentFilm, setFilm] = useState({});\n\n  async function getData() {\n    let res = await fetch('https://raw.githubusercontent.com/roman-curse/videoJson/master/videoJson.json');\n    res.json().then(res => setData(res.results)).catch(err => console.log(err))\n  };\n\n  function getGenre(filmArr) {\n    filmArr.map(film => film.genre_ids.map(el => {\n      if (genres.find(genre => genre === el) === undefined) {\n        setGenre([...genres, el])\n      }\n    }))\n  }\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  useEffect(() => {\n    getGenre(data);\n  }, [data, getGenre]);\n\n  useEffect(() => {\n    setFilms(data.filter(el => el.genre_ids.find(genre => genre === genres[0])));\n  }, [genres]);\n  return (\n      <div className=\"container\">\n        <Header/>\n        <SideMenuFocusable genres={genres} data={data} setFilms={setFilms} focusKey={'MENU'}/>\n        <FilmListFocusable films={films} setFilm={setFilm} focusKey={'CONTENT'}/>\n        {currentFilm.poster_path && (\n            <FilmDetailsFocusable overview={currentFilm.overview} poster_path={currentFilm.poster_path}\n                         title={currentFilm.title}/>\n        )}\n      </div>\n  );\n};\n\nconst AppFocusable= withFocusable()(App);\n\nconst Main = ({}) => (<AppFocusable focusable={false}/>);\n\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Main from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/arrow.576b3fa7.svg\";","module.exports = __webpack_public_path__ + \"static/media/eye.98ea0c65.svg\";","module.exports = __webpack_public_path__ + \"static/media/add.408bb555.svg\";","module.exports = __webpack_public_path__ + \"static/media/play.317ebf2b.svg\";"],"sourceRoot":""}